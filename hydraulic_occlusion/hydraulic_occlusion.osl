/*
 * This file is part of Jakub Jaszewski OSL repository.
 * https://github.com/j-jasz/OSL
 * Copyright (C) 2025 Jakub Jaszewski.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

void unit_disk (vector N,
                        vector Normal,
                        float Ray_Angle,
                        float rand,
                        output float x_dir,
                        output float y_dir
){
    vector Dir = N - dot(N, Normal) * Normal;
    Dir = normalize(Dir);
    float max_angle = Ray_Angle * M_PI / 2;
    float fin_angle = rand * max_angle * 2 - max_angle;
    float theta = atan2(Dir[1], Dir[0]) + fin_angle;
    x_dir = cos(theta);
    y_dir = sin(theta);
}

shader hydraulic_occlusion(
    int Samples = 4,
    float Max_Distance = 0.01,
    float Min_Distance = 0.001,
    float Ray_Angle = 0.99,
    float Ray_Spread = 0.0,
    float Ray_Tilt = 0.0,
    vector Normal = vector(0, 0, 1),
    output color Hydraulic_Occlusion = 0,
    output float Distance_per_Sample = 0.0
) {
    // declare variables here, to save registers by reusing them in the Samples loop
    int i;
    float hit_accum = 0.0;
    float hitdist = 0.0;
    float rand, x_dir, y_dir, z_dir;
    float mixage = 0.0;
    float ray_tilt = Ray_Tilt*-1;
    float seed = hashnoise(P, 123456.0);
    vector ray_dir, hit_nor, hit_pos;
    seed = fmod(seed, 1.0);

    // ignore shading points on the backface
    if (!backfacing()) {
        for (i = 0; i < Samples; i++) {
            rand = hashnoise(P, seed + i * 0.1);
            unit_disk(N, Normal, Ray_Angle, rand, x_dir, y_dir);
            z_dir = ray_tilt + (rand * Ray_Spread - (Ray_Spread / 2.0));
            ray_dir = vector(x_dir, y_dir, z_dir);
            // t is always 1 inside the If block, we don't need it.
            if (trace(P, ray_dir, "maxdist", Max_Distance)){
                getmessage("trace", "hitdist", hitdist);
                getmessage("trace", "N", hit_nor);
                // check if the face is hit on the front or back and ignore rays shorter than
                if (dot(hit_nor, ray_dir) < 0 && hitdist >= Min_Distance) {
                    // hitdist is always positive, no need to clamp at 0
                    hit_accum += hitdist;
                    mixage += min(1/hit_accum, 1.0);
                }
            }
        }
    }
    mixage /= Samples;
    color ColorHit = color(0.0, 0.0, 0.0);
    color ColorIn = color(1.0, 1.0, 1.0);
    Hydraulic_Occlusion = mix(ColorHit, ColorIn, mixage);
    Distance_per_Sample = hit_accum / Samples;
}





